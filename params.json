{"name":"Angular-json-example","tagline":"","body":"angular-seed â€” the seed for AngularJS apps\r\nThis project is an application skeleton for a typical AngularJS web app. You can use it to quickly bootstrap your angular webapp projects and dev environment for these projects.\r\n\r\nThe seed contains a sample AngularJS application and is preconfigured to install the Angular framework and a bunch of development and testing tools for instant web development gratification.\r\n\r\nThe seed app doesn't do much, just shows how to wire two controllers and views together.\r\n\r\nGetting Started\r\n\r\nTo get you started you can simply clone the angular-seed repository and install the dependencies:\r\n\r\nPrerequisites\r\n\r\nYou need git to clone the angular-seed repository. You can get git from http://git-scm.com/.\r\n\r\nWe also use a number of node.js tools to initialize and test angular-seed. You must have node.js and its package manager (npm) installed. You can get them from http://nodejs.org/.\r\n\r\nClone angular-seed\r\n\r\nClone the angular-seed repository using git:\r\n\r\ngit clone https://github.com/angular/angular-seed.git\r\ncd angular-seed\r\nIf you just want to start a new project without the angular-seed commit history then you can do:\r\n\r\ngit clone --depth=1 https://github.com/angular/angular-seed.git <your-project-name>\r\nThe depth=1 tells git to only pull down one commit worth of historical data.\r\n\r\nInstall Dependencies\r\n\r\nWe have two kinds of dependencies in this project: tools and angular framework code. The tools help us manage and test the application.\r\n\r\nWe get the tools we depend upon via npm, the node package manager.\r\nWe get the angular code via bower, a client-side code package manager.\r\nWe have preconfigured npm to automatically run bower so we can simply do:\r\n\r\nnpm install\r\nBehind the scenes this will also call bower install. You should find that you have two new folders in your project.\r\n\r\nnode_modules - contains the npm packages for the tools we need\r\napp/bower_components - contains the angular framework files\r\nNote that the bower_components folder would normally be installed in the root folder but angular-seed changes this location through the .bowerrc file. Putting it in the app folder makes it easier to serve the files by a webserver.\r\n\r\nRun the Application\r\n\r\nWe have preconfigured the project with a simple development web server. The simplest way to start this server is:\r\n\r\nnpm start\r\nNow browse to the app at http://localhost:8000/app/index.html.\r\n\r\nDirectory Layout\r\n\r\napp/                    --> all of the source files for the application\r\n  app.css               --> default stylesheet\r\n  components/           --> all app specific modules\r\n    version/              --> version related components\r\n      version.js                 --> version module declaration and basic \"version\" value service\r\n      version_test.js            --> \"version\" value service tests\r\n      version-directive.js       --> custom directive that returns the current app version\r\n      version-directive_test.js  --> version directive tests\r\n      interpolate-filter.js      --> custom interpolation filter\r\n      interpolate-filter_test.js --> interpolate filter tests\r\n  view1/                --> the view1 view template and logic\r\n    view1.html            --> the partial template\r\n    view1.js              --> the controller logic\r\n    view1_test.js         --> tests of the controller\r\n  view2/                --> the view2 view template and logic\r\n    view2.html            --> the partial template\r\n    view2.js              --> the controller logic\r\n    view2_test.js         --> tests of the controller\r\n  app.js                --> main application module\r\n  index.html            --> app layout file (the main html template file of the app)\r\n  index-async.html      --> just like index.html, but loads js files asynchronously\r\nkarma.conf.js         --> config file for running unit tests with Karma\r\ne2e-tests/            --> end-to-end tests\r\n  protractor-conf.js    --> Protractor config file\r\n  scenarios.js          --> end-to-end scenarios to be run by Protractor\r\nTesting\r\n\r\nThere are two kinds of tests in the angular-seed application: Unit tests and End to End tests.\r\n\r\nRunning Unit Tests\r\n\r\nThe angular-seed app comes preconfigured with unit tests. These are written in Jasmine, which we run with the Karma Test Runner. We provide a Karma configuration file to run them.\r\n\r\nthe configuration is found at karma.conf.js\r\nthe unit tests are found next to the code they are testing and are named as ..._test.js.\r\nThe easiest way to run the unit tests is to use the supplied npm script:\r\n\r\nnpm test\r\nThis script will start the Karma test runner to execute the unit tests. Moreover, Karma will sit and watch the source and test files for changes and then re-run the tests whenever any of them change. This is the recommended strategy; if your unit tests are being run every time you save a file then you receive instant feedback on any changes that break the expected code functionality.\r\n\r\nYou can also ask Karma to do a single run of the tests and then exit. This is useful if you want to check that a particular version of the code is operating as expected. The project contains a predefined script to do this:\r\n\r\nnpm run test-single-run\r\nEnd to end testing\r\n\r\nThe angular-seed app comes with end-to-end tests, again written in Jasmine. These tests are run with the Protractor End-to-End test runner. It uses native events and has special features for Angular applications.\r\n\r\nthe configuration is found at e2e-tests/protractor-conf.js\r\nthe end-to-end tests are found in e2e-tests/scenarios.js\r\nProtractor simulates interaction with our web app and verifies that the application responds correctly. Therefore, our web server needs to be serving up the application, so that Protractor can interact with it.\r\n\r\nnpm start\r\nIn addition, since Protractor is built upon WebDriver we need to install this. The angular-seed project comes with a predefined script to do this:\r\n\r\nnpm run update-webdriver\r\nThis will download and install the latest version of the stand-alone WebDriver tool.\r\n\r\nOnce you have ensured that the development web server hosting our application is up and running and WebDriver is updated, you can run the end-to-end tests using the supplied npm script:\r\n\r\nnpm run protractor\r\nThis script will execute the end-to-end tests against the application being hosted on the development server.\r\n\r\nUpdating Angular\r\n\r\nPreviously we recommended that you merge in changes to angular-seed into your own fork of the project. Now that the angular framework library code and tools are acquired through package managers (npm and bower) you can use these tools instead to update the dependencies.\r\n\r\nYou can update the tool dependencies by running:\r\n\r\nnpm update\r\nThis will find the latest versions that match the version ranges specified in the package.json file.\r\n\r\nYou can update the Angular dependencies by running:\r\n\r\nbower update\r\nThis will find the latest versions that match the version ranges specified in the bower.json file.\r\n\r\nLoading Angular Asynchronously\r\n\r\nThe angular-seed project supports loading the framework and application scripts asynchronously. The special index-async.html is designed to support this style of loading. For it to work you must inject a piece of Angular JavaScript into the HTML page. The project has a predefined script to help do this.\r\n\r\nnpm run update-index-async\r\nThis will copy the contents of the angular-loader.js library file into the index-async.html page. You can run this every time you update the version of Angular that you are using.\r\n\r\nServing the Application Files\r\n\r\nWhile angular is client-side-only technology and it's possible to create angular webapps that don't require a backend server at all, we recommend serving the project files using a local webserver during development to avoid issues with security restrictions (sandbox) in browsers. The sandbox implementation varies between browsers, but quite often prevents things like cookies, xhr, etc to function properly when an html page is opened via file:// scheme instead of http://.\r\n\r\nRunning the App during Development\r\n\r\nThe angular-seed project comes preconfigured with a local development webserver. It is a node.js tool called http-server. You can start this webserver with npm start but you may choose to install the tool globally:\r\n\r\nsudo npm install -g http-server\r\nThen you can start your own development web server to serve static files from a folder by running:\r\n\r\nhttp-server -a localhost -p 8000\r\nAlternatively, you can choose to configure your own webserver, such as apache or nginx. Just configure your server to serve the files under the app/ directory.\r\n\r\nRunning the App in Production\r\n\r\nThis really depends on how complex your app is and the overall infrastructure of your system, but the general rule is that all you need in production are all the files under the app/ directory. Everything else should be omitted.\r\n\r\nAngular apps are really just a bunch of static html, css and js files that just need to be hosted somewhere they can be accessed by browsers.\r\n\r\nIf your Angular app is talking to the backend server via xhr or other means, you need to figure out what is the best way to host the static files to comply with the same origin policy if applicable. Usually this is done by hosting the files by the backend server or through reverse-proxying the backend server(s) and webserver(s).\r\n\r\nContinuous Integration\r\n\r\nTravis CI\r\n\r\nTravis CI is a continuous integration service, which can monitor GitHub for new commits to your repository and execute scripts such as building the app or running tests. The angular-seed project contains a Travis configuration file, .travis.yml, which will cause Travis to run your tests when you push to GitHub.\r\n\r\nYou will need to enable the integration between Travis and GitHub. See the Travis website for more instruction on how to do this.\r\n\r\nCloudBees\r\n\r\nCloudBees have provided a CI/deployment setup:\r\n\r\n \r\n\r\nIf you run this, you will get a cloned version of this repo to start working on in a private git repo, along with a CI service (in Jenkins) hosted that will run unit and end to end tests in both Firefox and Chrome.\r\n\r\nContact\r\n\r\nFor more information on AngularJS please check out http://angularjs.org/","google":"UA-75036351-1","note":"Don't delete this file! It's used internally to help with page regeneration."}